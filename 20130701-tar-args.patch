https://code.google.com/p/lz4/issues/detail?id=74

Index: lz4c.c
===================================================================
--- lz4c.c	(revision 98)
+++ lz4c.c	(working copy)
@@ -142,6 +142,7 @@
 //**************************************
 // Local Parameters
 //**************************************
+static int verbose = 0;
 static int overwrite = 0;
 static int blockSizeId = LZ4S_BLOCKSIZEID_DEFAULT;
 static int blockChecksum = 0;
@@ -176,6 +177,7 @@
     DISPLAY( " -c1/-hc: High compression \n");
     DISPLAY( " -d     : decompression \n");
     DISPLAY( " -y     : overwrite without prompting \n");
+    DISPLAY( " -v     : be verbose \n");
     DISPLAY( " -H     : Help (this text + advanced options)\n");
     return 0;
 }
@@ -215,7 +217,7 @@
 
     if (!strcmp (input_filename, stdinmark)) 
     {
-        DISPLAY( "Using stdin for input\n");
+        if (verbose) DISPLAY( "Using stdin for input\n");
         *pfinput = stdin;
 #ifdef _WIN32 // Need to set stdin/stdout to binary mode specifically for windows
         _setmode( _fileno( stdin ), _O_BINARY );
@@ -228,7 +230,7 @@
 
     if (!strcmp (output_filename, stdoutmark)) 
     {
-        DISPLAY( "Using stdout for output\n");
+        if (verbose) DISPLAY( "Using stdout for output\n");
         *pfoutput = stdout;
 #ifdef _WIN32 // Need to set stdin/stdout to binary mode specifically for windows
         _setmode( _fileno( stdout ), _O_BINARY );
@@ -243,9 +245,9 @@
         { 
             char ch;
             fclose(*pfoutput); 
-            DISPLAY( "Warning : %s already exists\n", output_filename); 
             if (!overwrite)
             {
+                DISPLAY( "Warning : %s already exists\n", output_filename);
                 DISPLAY( "Overwrite ? (Y/N) : ");
                 ch = (char)getchar();
                 if (ch!='Y') EXM_THROW(11, "Operation aborted : %s already exists", output_filename);
@@ -319,11 +321,11 @@
 
     // Status
     end = clock();
-    DISPLAY( "Compressed %llu bytes into %llu bytes ==> %.2f%%\n",
+    if (verbose) DISPLAY( "Compressed %llu bytes into %llu bytes ==> %.2f%%\n",
         (unsigned long long) filesize, (unsigned long long) compressedfilesize, (double)compressedfilesize/filesize*100);
     {
         double seconds = (double)(end - start)/CLOCKS_PER_SEC;
-        DISPLAY( "Done in %.2f s ==> %.2f MB/s\n", seconds, (double)filesize / seconds / 1024 / 1024);
+        if (verbose) DISPLAY( "Done in %.2f s ==> %.2f MB/s\n", seconds, (double)filesize / seconds / 1024 / 1024);
     }
 
     // Close & Free
@@ -469,11 +471,11 @@
 
     // Status
     end = clock();
-    DISPLAY( "Compressed %llu bytes into %llu bytes ==> %.2f%%\n",
+    if (verbose) DISPLAY( "Compressed %llu bytes into %llu bytes ==> %.2f%%\n",
         (unsigned long long) filesize, (unsigned long long) compressedfilesize, (double)compressedfilesize/filesize*100);
     {
         double seconds = (double)(end - start)/CLOCKS_PER_SEC;
-        DISPLAY( "Done in %.2f s ==> %.2f MB/s\n", seconds, (double)filesize / seconds / 1024 / 1024);
+        if (verbose) DISPLAY( "Done in %.2f s ==> %.2f MB/s\n", seconds, (double)filesize / seconds / 1024 / 1024);
     }
 
     // Close & Free
@@ -607,11 +609,11 @@
 
     // Status
     end = clock();
-    DISPLAY( "Compressed %llu bytes into %llu bytes ==> %.2f%%\n",
+    if (verbose) DISPLAY( "Compressed %llu bytes into %llu bytes ==> %.2f%%\n",
         (unsigned long long) filesize, (unsigned long long) compressedfilesize, (double)compressedfilesize/filesize*100);
     {
         double seconds = (double)(end - start)/CLOCKS_PER_SEC;
-        DISPLAY( "Done in %.2f s ==> %.2f MB/s\n", seconds, (double)filesize / seconds / 1024 / 1024);
+        if (verbose) DISPLAY( "Done in %.2f s ==> %.2f MB/s\n", seconds, (double)filesize / seconds / 1024 / 1024);
     }
 
     // Close & Free
@@ -852,7 +854,7 @@
     case LZ4S_MAGICNUMBER:
         return decodeLZ4S(finput, foutput);
     case LEGACY_MAGICNUMBER:
-        DISPLAY("Detected : Legacy format \n");
+        if (verbose) DISPLAY("Detected : Legacy format \n");
         return decodeLegacyStream(finput, foutput);
     case LZ4S_SKIPPABLE0:
         nbReadBytes = fread(&size, 1, 4, finput);
@@ -890,10 +892,10 @@
 
     // Final Status
     end = clock();
-    DISPLAY( "Successfully decoded %llu bytes \n", filesize);
+    if (verbose) DISPLAY( "Successfully decoded %llu bytes \n", filesize);
     {
         double seconds = (double)(end - start)/CLOCKS_PER_SEC;
-        DISPLAY( "Done in %.2f s ==> %.2f MB/s\n", seconds, (double)filesize / seconds / 1024 / 1024);
+        if (verbose) DISPLAY( "Done in %.2f s ==> %.2f MB/s\n", seconds, (double)filesize / seconds / 1024 / 1024);
     }
 
     // Close
@@ -919,11 +921,9 @@
     char nullinput[] = NULL_INPUT;
     char extension[] = EXTENSION;
 
-    // Welcome message
-    DISPLAY( WELCOME_MESSAGE);
+    if (strstr(argv[0], "unlz4")) { decode=1; }
+    else if (strstr(argv[0], "lz4cat")) { decode=1; output_filename=stdoutmark; }
 
-    if (argc<2) { badusage(exename); return 1; }
-
     for(i=1; i<argc; i++)
     {
         char* argument = argv[i];
@@ -933,6 +933,11 @@
         // Decode command (note : aggregated commands are allowed)
         if (argument[0]=='-')
         {
+            if (argument[1]==0)
+            {
+                if (!input_filename) input_filename=stdinmark;
+                else output_filename=stdoutmark;
+            }
             while (argument[1]!=0)
             {
                 argument ++;
@@ -1003,6 +1008,9 @@
                     // Overwrite
                 case 'y': overwrite=1; break;
 
+                    // Verbose
+                case 'v': verbose=1; break;
+
                     // Unrecognised command
                 default : badusage(exename); return 1;
                 }
@@ -1022,15 +1030,19 @@
         }
     }
 
-    // No input filename ==> Error
-    if(!input_filename) { badusage(exename); return 1; }
+    // Welcome message
+    if (verbose) DISPLAY( WELCOME_MESSAGE);
 
+    // No input filename ==> use stdin
+    if(!input_filename) { input_filename=stdinmark; }
+
     if (bench) return BMK_benchFile(argv+filenamesStart, argc-filenamesStart, cLevel);
 
     // No output filename ==> build one automatically (when possible)
     if (!output_filename) 
     { 
-        if (!decode)   // compression
+        if (input_filename == stdinmark) output_filename=stdoutmark;
+        else if (!decode)   // compression
         {
             int i=0, l=0;
             while (input_filename[l]!=0) l++;
